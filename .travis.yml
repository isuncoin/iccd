sudo: false
language: cpp

compiler:
  - clang
  - gcc

env:
  global:
    # Maintenance note: to move to a new version
    # of boost, update both BOOST_ROOT and BOOST_URL.
    # Note that for simplicity, BOOST_ROOT's final
    # namepart must match the folder name internal
    # to boost's .tar.gz.
    - BOOST_ROOT=$HOME/boost_1_59_0
    - BOOST_URL='http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost%2F1.59.0%2Fboost_1_59_0.tar.gz%2Fdownload&ts=1441761349&use_mirror=skylineservers'
    # We need gcc >= 4.8 for some c++11 features.
    # To change, also change the packages: entry.
    # Env vars are not translated there.
    - GCC_VER=4.8
  matrix:
    - TARGET=debug
    - TARGET=debug.nounity
    # We can specify any combination of builds here, for example, to
    # include release builds, too, uncomment the following lines.
    #- TARGET=release
    #- TARGET=release.nounity

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - python-software-properties
    # See also GCC_VER.
    - g++-4.8
    - protobuf-compiler
    - libprotobuf-dev
    - libssl-dev
    # Not available, but not needed
    # - exuberant-ctags
    - binutils-gold
    # Provides a backtrace if the unittests crash
    - gdb

cache:
  directories:
  - $BOOST_ROOT

before_install:
  # Override gcc version to $GCC_VER.
  # Put an appropriate symlink at the front of the path.
  - mkdir -v $HOME/bin
  - test -x $( type -p gcc-$GCC_VER )
  - ln -sv $(type -p gcc-$GCC_VER) $HOME/bin/gcc
  - test -x $( type -p g++-$GCC_VER )
  - ln -sv $(type -p g++-$GCC_VER) $HOME/bin/g++
  - export PATH=$PWD/bin:$PATH

  # What versions are we ACTUALLY running?
  - g++ -v
  - clang -v
  # Avoid `spurious errors` caused by ~/.npm permission issues
  # Does it already exist? Who owns? What permissions?
  - ls -lah ~/.npm || mkdir ~/.npm
  # Make sure we own it
  - chown -Rc $USER ~/.npm

  - bash bin/sh/install-boost.sh

script:
  # Set so any failing command will abort the build
  - set -e
  # Make sure vcxproj is up to date
  - scons vcxproj
  - git diff --exit-code
  # $CC will be either `clang` or `gcc`
  # http://docs.travis-ci.com/user/migrating-from-legacy/?utm_source=legacy-notice&utm_medium=banner&utm_campaign=legacy-upgrade
  #   indicates that 2 cores are available to containers.
  - scons -j2 $CC.$TARGET
  # We can be sure we're using the build/$CC.$TARGET variant (-f so never err)
  - rm -f build/rippled 
  - export RIPPLED_PATH="$PWD/build/$CC.$TARGET/rippled"
  # See what we've actually built
  - ldd $RIPPLED_PATH
  # Run unittests (under gdb)
  - | # create gdb script
    echo "set env MALLOC_CHECK_=3" > script.gdb 
    echo "run" >> script.gdb
    echo "backtrace full" >> script.gdb 
    # gdb --help
  - cat script.gdb | gdb --ex 'set print thread-events off' --return-child-result --args $RIPPLED_PATH --unittest
  - npm install
  # Use build/(gcc|clang).$TARGET/rippled
  - |
    echo "exports.default_server_config = {\"rippled_path\" : \"$RIPPLED_PATH\"};" > test/config.js

  # Run integration tests
  - npm test

notifications:
  email:
    false
  irc:
    channels:
      - "chat.freenode.net#ripple-dev"
